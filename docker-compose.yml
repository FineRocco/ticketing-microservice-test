networks:
  monitoring:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      - ./loki-data:/loki
      - ./loki-wal:/wal
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: ["-config.file=/etc/tempo/config.yaml"]
    user: "0"
    ports:
      - "3200:3200"   # Tempo HTTP API (Grafana)
    volumes:
      - ./tempo-config.yaml:/etc/tempo/config.yaml
      - ./tempo-data:/var/tempo
    networks:
      - monitoring

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.94.0
    container_name: otel-collector
    command: ["--config=/etc/otel/config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
    ports:
      - "8889:8889"   # Prometheus exporter (app metrics out)
      - "4319:4318"   # OTLP/HTTP for app on host
      - "8888:8888"  # Collector self-telemetry
    depends_on:
      - tempo
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana-data:/var/lib/grafana
    depends_on:
      - loki
      - prometheus
      - tempo
    networks:
      - monitoring

  microservice:
    build:
      context: .
      dockerfile: Dockerfile
    image: microservicetest
    container_name: microservice
    ports:
      - "8080:8080"
    depends_on:
      - otel-collector
    networks:
      - monitoring

